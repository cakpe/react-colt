Typical react app layout:
There is usually an app component -- in index.js. It is typically the one js file that is rendered
into the DOM -- It has the render return syntax:
    render() {
        return (

        )
    }
It is like the entry point into our code.

-------------------------------
***PROPS ARE IMMUTABLE. You can't manually change them (only through state and re-rendering)
when you're passing props, you don't have to use the curly braces if they're strings; you do so
otherwise.
------------------------------
To start the node server, -- npm start
---------------------------------------
    IMPORTS AND EXPORTS
***If you have a js file with multiple functions that you would like to export,
    then you export like so at the bottom;
        export { sing, bathe, dance };

    Then in the file that does the import (the below is if you want juat 1 func from the file),
    import { bathe } from './helper.js';

**You can also do default exports and optional exports simultaneously:
    export default sing;
    export { bathe, dance };
----------------------------------------
If you want to style something that would affect the entire app, do it in index.css
It's also good practice to delete the default styling in App.css that comes with create-react-app
----------------------------------------
    STATE IN CLASS COMPONENTS
Syntax:
If you are building a component with state, you need a standard react constructor:
    constructor(props) {
        super(props);
        this.state = {

        }
    }

***THE ABOVE SYNTAX IS IF YOU'RE WRITING A CLASS COMPONENT. With a functon component, you use react hooks (useState)
****If you're using props in the constructor, that line super(props) must be there. Otherwise, you can just have super()

*****YOU SHOULD NOT SET STATE INSIDE THE CONTRUCTOR OR YOUR RENDER() function

***alternate newer way of declaring state:
    state = { clicked: false };
----------------------------------------
When creating click events, you need to bind the functions to the class.
Method 1 (in the constructor):
    this.handleClick = this.handleClick.bind(this);
Method 2 (fat arrow syntax when you define the click):
    handleClick = () => {
        console.log("Clicked");
    }

***You do not need to bind every single method that you reference inside of render().  You can call this.whatever() 
without binding it if you are executing the function IMMEDIATELY.  Where it becomes tricky is when you are passing 
the function to something and NOT calling it right away.  The most common example is event handlers.  
When we pass a function like onClick={this.doSomething} we are not executing the function immediately.  
We are passing the function which will later be executed when a user clicks.
-------------------------------------------
    SET STATE RULES (based on already existing state)
    The rules below are typically for counters and objects not single variables
*setState is asynchronous so it's risky to assume a previous setState call has finished before rapidly calling another.
Also, sometimes REACT will squash multiple calls to setState into one one call for performance reasons.

****THEREFORE, if a call to setState depends on current state (such as an increment of a number stored in state), the
safest thing is to use an alterate "callback form":
    this.setState(curState => (return {count: curState.count + 1}));
cleaner synax:
    function incrementCounter(prevState) {
        return { count: prevState.count + 1 };
    }

    this.setState(incrementCounter);


*****You have to be extra careful when modifying your array of objects because mutating nested data structures 
in your state can cause problems with REACT. DON'T DO IT!!!
***The solution is to copy the data structure into a new variable and make the changes there with the spread operator.

.map(), .reduce(), .filter() and the spread operator (...) are your best friends.

RULES OF THUMB FOR STATE:
*objects in state should be as minimal as possible. Only put what you need in state
*State should live on the parent. So that parents can pass data down to children.
------------------------------------------------
    REACT FORMS
***Handling a form with multiple inputs in react:
    to do this properly, each form must have a name attribute and that name attribute should be the same as that in the state.
    This way, you can use one handle change function and update state like so:
        handleChange = (e) => {
            e.preventDefault();
            this.setState({ [e.target.name]: e.target.value });
        }    

---------------------------------------------------
    Spread operator
*Do not use to concat (it works slower under the hood)
*use to copy one array into another (it preserves the older array):
    let arr = ['a','b','c'];
    let arr2 = [...arr];
*we know the regular use of spread -- to expand one array into another:
    let arr = ['a','b'];
    let arr2 = [...arr,'c','d'];

***lastly, and especially for react, we use the operator to create copies of existing objects with new or updated values 
or to make a copy of an object with more properties:
    const user1 = {
	    name: 'Jen',
	    age: 22
    };

    const clonedUser = { ...user1 };
    console.log(clonedUser);

example 2:
    addItem(item) { //we spread item below because it is an object
        let newItem = { ...item, id: uuid() };
        this.setState(state => ({ //the better way of setting state instead of mutating objects
            items: [...state.items, newItem]
        }));
    }

-------------------------------------------------------------------
    REACT COMPONENT LIFECYCLES
Three main phases to know about:
    mounting, updating, unmounting

componentDidMount() -- Runs after the component is mounted. 'mounting' is the firs time the component is rendered to DOM.
                        This is a good place to load data or setup subscriptions/timers. Calling setState() here weill trigger a re-render,
                        so be cautious. It's not a bad thing, but just be aware that state has already been rendered before componentDidMount().
                        AFTER THE FIRST RENDER, componentDidMount() is called and it is called ONLY ONCE, no matter the number of subsequent
                        renders. THIS IS THE BEST PLACE TO MAKE AJAX AXIOS REQUESTS.

**sometimes, render is called twice. if you would liek to get rid of this behavior, remove strict mode wrapper in index.js
***if you have a constructor, do not set state in there.

componentDidUpdate() -- Runs every time AFTER a component is rendered, EXCEPT THE FIRST TIME (componentDidMount()). There are three main things
                        that would trigger this function: setState(), the component getting new props, or an external server force update.
                        *This is a good place to carry out side events like logging to storage, autosaving etc.

**refer to the todo app (TodoList.js) to see how prevProps and prevState are used in componentDidUpdate()

componentWillUnmount() -- called when a component is destroyed and no longer in use. Similar to dispose in flutter.