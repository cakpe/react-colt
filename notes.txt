Typical react app layout:
There is usually an app component -- in index.js. It is typically the one js file that is rendered
into the DOM -- It has the render return syntax:
    render() {
        return (

        )
    }
It is like the entry point into our code.

-------------------------------
***PROPS ARE IMMUTABLE. You can't manually change them (only through state and re-rendering)
when you're passing props, you don't have to use the curly braces if they're strings; you do so
otherwise.
------------------------------
To start the node server, -- npm start
---------------------------------------
    IMPORTS AND EXPORTS
***If you have a js file with multiple functions that you would like to export,
    then you export like so at the bottom;
        export { sing, bathe, dance };

    Then in the file that does the import (the below is if you want juat 1 func from the file),
    import { bathe } from './helper.js';

**You can also do default exports and optional exports simultaneously:
    export default sing;
    export { bathe, dance };
----------------------------------------
If you want to style something that would affect the entire app, do it in index.css
It's also good practice to delete the default styling in App.css that comes with create-react-app
----------------------------------------
STATE IN CLASS COMPONENTS
Syntax:
If you are building a component with state, you need a standard react constructor:
    constructor(props) {
        super(props);
        this.state = {

        }
    }

***THE ABOVE SYNTAX IS IF YOU'RE WRITING A CLASS COMPONENT. With a functon component, you use react hooks (useState)
****If you're using props in the constructor, that line super(props) must be there. Otherwise, you can just have super()

*****YOU SHOULD NOT SET STATE INSIDE THE CONTRUCTOR OR YOUR RENDER() function

***alternate newer way of declaring state:
    state = { clicked: false };
----------------------------------------
When creating click events, you need to bind the functions to the class.
Method 1 (in the constructor):
    this.handleClick = this.handleClick.bind(this);
Method 2 (fat arrow syntax when you define the click):
    handleClick = () => {
        console.log("Clicked");
    }